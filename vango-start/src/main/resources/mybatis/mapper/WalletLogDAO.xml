<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bayou.service.vango.data.mapper.WalletLogDAO">
  <resultMap id="BaseResultMap" type="com.bayou.service.vango.data.model.WalletLog">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="uid" jdbcType="BIGINT" property="uid" />
    <result column="no" jdbcType="VARCHAR" property="no" />
    <result column="btype" jdbcType="SMALLINT" property="btype" />
    <result column="count" jdbcType="INTEGER" property="count" />
    <result column="old_wallet_json" jdbcType="VARCHAR" property="oldWalletJson" />
    <result column="new_wallet_json" jdbcType="VARCHAR" property="newWalletJson" />
    <result column="status" jdbcType="SMALLINT" property="status" />
    <result column="mtime" jdbcType="INTEGER" property="mtime" />
    <result column="ctime" jdbcType="INTEGER" property="ctime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, `uid`, `no`, btype, `count`, old_wallet_json, new_wallet_json, `status`, mtime, 
    ctime
  </sql>
  <select id="selectByExample" parameterType="com.bayou.service.vango.data.model.WalletLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from wallet_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from wallet_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from wallet_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.bayou.service.vango.data.model.WalletLogExample">
    delete from wallet_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.bayou.service.vango.data.model.WalletLog">
    insert into wallet_log (id, `uid`, `no`, btype, 
      `count`, old_wallet_json, new_wallet_json, 
      `status`, mtime, ctime
      )
    values (#{id,jdbcType=INTEGER}, #{uid,jdbcType=BIGINT}, #{no,jdbcType=VARCHAR}, #{btype,jdbcType=SMALLINT}, 
      #{count,jdbcType=INTEGER}, #{oldWalletJson,jdbcType=VARCHAR}, #{newWalletJson,jdbcType=VARCHAR}, 
      #{status,jdbcType=SMALLINT}, #{mtime,jdbcType=INTEGER}, #{ctime,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.bayou.service.vango.data.model.WalletLog">
    insert into wallet_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uid != null">
        `uid`,
      </if>
      <if test="no != null">
        `no`,
      </if>
      <if test="btype != null">
        btype,
      </if>
      <if test="count != null">
        `count`,
      </if>
      <if test="oldWalletJson != null">
        old_wallet_json,
      </if>
      <if test="newWalletJson != null">
        new_wallet_json,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="mtime != null">
        mtime,
      </if>
      <if test="ctime != null">
        ctime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=BIGINT},
      </if>
      <if test="no != null">
        #{no,jdbcType=VARCHAR},
      </if>
      <if test="btype != null">
        #{btype,jdbcType=SMALLINT},
      </if>
      <if test="count != null">
        #{count,jdbcType=INTEGER},
      </if>
      <if test="oldWalletJson != null">
        #{oldWalletJson,jdbcType=VARCHAR},
      </if>
      <if test="newWalletJson != null">
        #{newWalletJson,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=SMALLINT},
      </if>
      <if test="mtime != null">
        #{mtime,jdbcType=INTEGER},
      </if>
      <if test="ctime != null">
        #{ctime,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.bayou.service.vango.data.model.WalletLogExample" resultType="java.lang.Long">
    select count(*) from wallet_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update wallet_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null">
        `uid` = #{record.uid,jdbcType=BIGINT},
      </if>
      <if test="record.no != null">
        `no` = #{record.no,jdbcType=VARCHAR},
      </if>
      <if test="record.btype != null">
        btype = #{record.btype,jdbcType=SMALLINT},
      </if>
      <if test="record.count != null">
        `count` = #{record.count,jdbcType=INTEGER},
      </if>
      <if test="record.oldWalletJson != null">
        old_wallet_json = #{record.oldWalletJson,jdbcType=VARCHAR},
      </if>
      <if test="record.newWalletJson != null">
        new_wallet_json = #{record.newWalletJson,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=SMALLINT},
      </if>
      <if test="record.mtime != null">
        mtime = #{record.mtime,jdbcType=INTEGER},
      </if>
      <if test="record.ctime != null">
        ctime = #{record.ctime,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update wallet_log
    set id = #{record.id,jdbcType=INTEGER},
      `uid` = #{record.uid,jdbcType=BIGINT},
      `no` = #{record.no,jdbcType=VARCHAR},
      btype = #{record.btype,jdbcType=SMALLINT},
      `count` = #{record.count,jdbcType=INTEGER},
      old_wallet_json = #{record.oldWalletJson,jdbcType=VARCHAR},
      new_wallet_json = #{record.newWalletJson,jdbcType=VARCHAR},
      `status` = #{record.status,jdbcType=SMALLINT},
      mtime = #{record.mtime,jdbcType=INTEGER},
      ctime = #{record.ctime,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.bayou.service.vango.data.model.WalletLog">
    update wallet_log
    <set>
      <if test="uid != null">
        `uid` = #{uid,jdbcType=BIGINT},
      </if>
      <if test="no != null">
        `no` = #{no,jdbcType=VARCHAR},
      </if>
      <if test="btype != null">
        btype = #{btype,jdbcType=SMALLINT},
      </if>
      <if test="count != null">
        `count` = #{count,jdbcType=INTEGER},
      </if>
      <if test="oldWalletJson != null">
        old_wallet_json = #{oldWalletJson,jdbcType=VARCHAR},
      </if>
      <if test="newWalletJson != null">
        new_wallet_json = #{newWalletJson,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=SMALLINT},
      </if>
      <if test="mtime != null">
        mtime = #{mtime,jdbcType=INTEGER},
      </if>
      <if test="ctime != null">
        ctime = #{ctime,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bayou.service.vango.data.model.WalletLog">
    update wallet_log
    set `uid` = #{uid,jdbcType=BIGINT},
      `no` = #{no,jdbcType=VARCHAR},
      btype = #{btype,jdbcType=SMALLINT},
      `count` = #{count,jdbcType=INTEGER},
      old_wallet_json = #{oldWalletJson,jdbcType=VARCHAR},
      new_wallet_json = #{newWalletJson,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=SMALLINT},
      mtime = #{mtime,jdbcType=INTEGER},
      ctime = #{ctime,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>